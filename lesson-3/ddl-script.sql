DROP TYPE IF EXISTS user_role;
CREATE TYPE user_role AS ENUM ('user', 'admin', 'warehouseman', 'editor');

CREATE TABLE IF NOT EXISTS "Address" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"street" VARCHAR(255) NOT NULL,
	"city" VARCHAR(100) NOT NULL,
	"postal_code" VARCHAR(20) NOT NULL,
	"country" VARCHAR(100) NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "User" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"first_name" VARCHAR(40) NOT NULL,
	"last_name" VARCHAR(60) NOT NULL,
	"email" VARCHAR(255) NOT NULL UNIQUE,
	"password" VARCHAR(255) NOT NULL,
	"role" user_role NOT NULL,
	"address_id" INTEGER,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Manufacturer" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(100) NOT NULL UNIQUE,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Product" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"manufacturer_id" INTEGER NOT NULL,
	"name" VARCHAR(255) NOT NULL,
	"description" TEXT,
	"price" DECIMAL NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Category" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255) NOT NULL,
	"parent_id" INTEGER,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Attribute" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(100) NOT NULL UNIQUE,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Option" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"attribute_id" INTEGER NOT NULL,
	"value" VARCHAR(100) NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Promotion" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(100) NOT NULL,
	"discount_percentage" DECIMAL NOT NULL,
	"start_date" TIMESTAMPTZ NOT NULL,
	"end_date" TIMESTAMPTZ NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Variant" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"product_id" INTEGER NOT NULL,
	"sku" VARCHAR(50) NOT NULL UNIQUE,
	"price_modifier" DECIMAL NOT NULL,
	"promotion_id" INTEGER,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Warehouse" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(100) NOT NULL UNIQUE,
	"address_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "StockItem" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"shipment_id" INTEGER,
	"warehouse_id" INTEGER NOT NULL,
	"variant_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Review" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"user_id" INTEGER NOT NULL,
	"product_id" INTEGER NOT NULL,
	"description" TEXT,
	"rating" INTEGER NOT NULL,
	"posted_at" TIMESTAMPTZ NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "DeliveryMethod" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(100) NOT NULL UNIQUE,
	"cost" DECIMAL NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "PaymentMethod" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(100) NOT NULL UNIQUE,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Status" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255) NOT NULL UNIQUE,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Order" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"status_id" INTEGER NOT NULL,
	"user_id" INTEGER NOT NULL,
	"delivery_method_id" INTEGER NOT NULL,
	"payment_method_id" INTEGER NOT NULL,
	"order_date" TIMESTAMPTZ NOT NULL,
	"billing_address_id" INTEGER NOT NULL,
	"shipping_address_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "OrderItem" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"order_id" INTEGER NOT NULL,
	"stock_item_id" INTEGER NOT NULL,
	"unit_price" DECIMAL NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Shipment" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"order_id" INTEGER NOT NULL,
	"tracking_number" VARCHAR(100) UNIQUE,
	"shipped_at" TIMESTAMPTZ NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "Cart" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"user_id" INTEGER NOT NULL UNIQUE,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "CartItem" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"quantity" INTEGER NOT NULL,
	"cart_id" INTEGER NOT NULL,
	"variant_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "FavoriteProduct" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"user_id" INTEGER NOT NULL,
	"product_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "ProductCategory" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"product_id" INTEGER NOT NULL,
	"category_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "ProductAttribute" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"product_id" INTEGER NOT NULL,
	"attribute_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "VariantOption" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"variant_id" INTEGER NOT NULL,
	"option_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

ALTER TABLE "Product"
    ADD CONSTRAINT fk_product_manufacturer FOREIGN KEY (manufacturer_id) REFERENCES "Manufacturer"(id),
    ADD CONSTRAINT chk_product_price_non_negative CHECK (price >= 0);

ALTER TABLE "Category"
    ADD CONSTRAINT fk_category_parent FOREIGN KEY (parent_id) REFERENCES "Category"(id) ON DELETE SET NULL;

ALTER TABLE "Option"
    ADD CONSTRAINT fk_option_attribute FOREIGN KEY (attribute_id) REFERENCES "Attribute"(id) ON DELETE CASCADE,
    ADD CONSTRAINT uq_option_attribute_value UNIQUE (attribute_id, value);

ALTER TABLE "Promotion"
    ADD CONSTRAINT chk_promotion_discount_range CHECK (discount_percentage >= 0 AND discount_percentage <= 100),
    ADD CONSTRAINT chk_promotion_dates_valid CHECK (end_date > start_date);

ALTER TABLE "Variant"
    ADD CONSTRAINT fk_variant_product FOREIGN KEY (product_id) REFERENCES "Product"(id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_variant_promotion FOREIGN KEY (promotion_id) REFERENCES "Promotion"(id) ON DELETE SET NULL,
    ADD CONSTRAINT chk_variant_price_modifier_non_negative CHECK (price_modifier >= 0);

ALTER TABLE "Warehouse"
    ADD CONSTRAINT fk_warehouse_address FOREIGN KEY (address_id) REFERENCES "Address"(id);

ALTER TABLE "StockItem"
    ADD CONSTRAINT fk_stockitem_shipment FOREIGN KEY (shipment_id) REFERENCES "Shipment"(id) ON DELETE SET NULL,
    ADD CONSTRAINT fk_stockitem_warehouse FOREIGN KEY (warehouse_id) REFERENCES "Warehouse"(id),
    ADD CONSTRAINT fk_stockitem_variant FOREIGN KEY (variant_id) REFERENCES "Variant"(id);

ALTER TABLE "Review"
    ADD CONSTRAINT fk_review_user FOREIGN KEY (user_id) REFERENCES "User"(id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_review_product FOREIGN KEY (product_id) REFERENCES "Product"(id) ON DELETE CASCADE,
    ADD CONSTRAINT chk_review_rating_range CHECK (rating >= 1 AND rating <= 5),
    ADD CONSTRAINT uq_review_user_product UNIQUE (user_id, product_id);

ALTER TABLE "DeliveryMethod"
    ADD CONSTRAINT chk_deliverymethod_cost_non_negative CHECK (cost >= 0);

ALTER TABLE "Order"
    ADD CONSTRAINT fk_order_status FOREIGN KEY (status_id) REFERENCES "Status"(id),
    ADD CONSTRAINT fk_order_user FOREIGN KEY (user_id) REFERENCES "User"(id),
    ADD CONSTRAINT fk_order_delivery_method FOREIGN KEY (delivery_method_id) REFERENCES "DeliveryMethod"(id),
    ADD CONSTRAINT fk_order_payment_method FOREIGN KEY (payment_method_id) REFERENCES "PaymentMethod"(id),
    ADD CONSTRAINT fk_order_billing_address FOREIGN KEY (billing_address_id) REFERENCES "Address"(id),
    ADD CONSTRAINT fk_order_shipping_address FOREIGN KEY (shipping_address_id) REFERENCES "Address"(id);

ALTER TABLE "OrderItem"
    ADD CONSTRAINT fk_orderitem_order FOREIGN KEY (order_id) REFERENCES "Order"(id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_orderitem_stockitem FOREIGN KEY (stock_item_id) REFERENCES "StockItem"(id),
    ADD CONSTRAINT chk_orderitem_unit_price_non_negative CHECK (unit_price >= 0),
    ADD CONSTRAINT uq_orderitem_order_stockitem UNIQUE (order_id, stock_item_id);

ALTER TABLE "Shipment"
    ADD CONSTRAINT fk_shipment_order FOREIGN KEY (order_id) REFERENCES "Order"(id) ON DELETE CASCADE;

ALTER TABLE "Cart"
    ADD CONSTRAINT fk_cart_user FOREIGN KEY (user_id) REFERENCES "User"(id) ON DELETE CASCADE;

ALTER TABLE "CartItem"
    ADD CONSTRAINT fk_cartitem_cart FOREIGN KEY (cart_id) REFERENCES "Cart"(id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_cartitem_variant FOREIGN KEY (variant_id) REFERENCES "Variant"(id) ON DELETE CASCADE,
    ADD CONSTRAINT chk_cartitem_quantity_positive CHECK (quantity > 0),
    ADD CONSTRAINT uq_cartitem_cart_variant UNIQUE (cart_id, variant_id);

ALTER TABLE "FavoriteProduct"
    ADD CONSTRAINT fk_favprod_user FOREIGN KEY (user_id) REFERENCES "User"(id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_favprod_product FOREIGN KEY (product_id) REFERENCES "Product"(id) ON DELETE CASCADE,
    ADD CONSTRAINT uq_favprod_user_product UNIQUE (user_id, product_id);

ALTER TABLE "ProductCategory"
    ADD CONSTRAINT fk_prodcat_product FOREIGN KEY (product_id) REFERENCES "Product"(id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_prodcat_category FOREIGN KEY (category_id) REFERENCES "Category"(id) ON DELETE CASCADE,
    ADD CONSTRAINT uq_prodcat_product_category UNIQUE (product_id, category_id);

ALTER TABLE "ProductAttribute"
    ADD CONSTRAINT fk_prodattr_product FOREIGN KEY (product_id) REFERENCES "Product"(id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_prodattr_attribute FOREIGN KEY (attribute_id) REFERENCES "Attribute"(id) ON DELETE CASCADE,
    ADD CONSTRAINT uq_prodattr_product_attribute UNIQUE (product_id, attribute_id);

ALTER TABLE "VariantOption"
    ADD CONSTRAINT fk_varopt_variant FOREIGN KEY (variant_id) REFERENCES "Variant"(id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_varopt_option FOREIGN KEY (option_id) REFERENCES "Option"(id) ON DELETE CASCADE,
    ADD CONSTRAINT uq_varopt_variant_option UNIQUE (variant_id, option_id);

ALTER TABLE "User"
    ADD CONSTRAINT fk_user_address FOREIGN KEY (address_id) REFERENCES "Address"(id) ON DELETE SET NULL;
